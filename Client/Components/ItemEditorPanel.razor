@using BlazorPatchDemo.Shared.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<Panel Type="Panel.PanelType.Standard" Title="@Title">
    <EditForm EditContext="@_context"
              OnValidSubmit=@SubmitValidEdit>

        <DataAnnotationsValidator/>
        <div class="row">
            <label for="Name">Name</label><br/>
            <InputText @bind-Value="ItemToEdit.Name" id="Name" class="name"></InputText>
        </div>
        <p></p>
        <div class="row">
            <label for="Description">Description</label><br/>
            <InputTextArea @bind-Value="ItemToEdit!.Description" id="Description" class="description"></InputTextArea>
        </div>
        <p></p>
        <div class="row">
            <label for="Price">Price</label><br/>
            <InputNumber @bind-Value="ItemToEdit!.Price" id="Price" class="price"></InputNumber>
        </div>
        <p></p>
        <ValidationSummary/>
        <p></p>
        <div class="button-group" style="justify-content: flex-end">
            <button class="safe" type="button" @onclick="QuitEdit">
                Quit
            </button>
            <span style="width:24px;"></span>
            <button class="safe" type="button" @onclick="ResetForm">
                Reset
            </button>
            <span style="width:24px;"></span>
            <button class="attention" type="submit">
                Submit
            </button>
            <span style="width:40px;"></span>
        </div>
    </EditForm>

</Panel>

@code {
    
    [Parameter, EditorRequired]
    public string Title { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public Item ItemToEdit { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnQuitEdit { get; set; }

    private EditContext _context = null!;
    private Item _saveItem = null!;
    
    
    protected override void OnParametersSet()
    {
        _saveItem = ItemToEdit.Clone();
        _context = new EditContext(ItemToEdit);

        base.OnParametersSet();
    }

    private async Task SubmitValidEdit() => await
        (ItemToEdit.Name != _saveItem.Name ||
         ItemToEdit.Description != _saveItem.Description ||
         ItemToEdit.Price != _saveItem.Price
            ? OnValidSubmit.InvokeAsync()
            : OnQuitEdit.InvokeAsync());
    

    private async Task QuitEdit() => await OnQuitEdit.InvokeAsync();
    
    private void ResetForm()
    {
        ItemToEdit.Name = _saveItem.Name;
        ItemToEdit.Description = _saveItem.Description;
        ItemToEdit.Price = _saveItem.Price;
    }

}
