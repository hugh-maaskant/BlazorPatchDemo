@page "/"

@using Microsoft.Extensions.Logging
@using BlazorPatchDemo.Shared.Entities
@using BlazorPatchDemo.Client.Components
@using BlazorPatchDemo.Client.Infra
@using System.Net

@inject ILogger<Index> Logger
@inject SafeItemClient Client

<h2>Catalog Item Editor</h2>

@if (_loading)
{
    <p>Loading Catalog items, please wait ...</p>
}
else
{
    <ItemSummariesPanel
        Items="@_items"
        ItemToEditOriginal="@_itemToEditOriginal"
        OnRefresh="@Refresh" 
        OnEditItem="@EditItem" 
        OnDeleteItem="@DeleteItem" 
        OnCreateItem="@CreateItem"
    >
    </ItemSummariesPanel>
    
    @switch (_editState)
    {
        case EditState.None:
            break;
            
        case EditState.Creating:
            <ItemEditorPanel    
                Title="Create a new Item"
                ItemToEdit="@_itemToEdit"
                OnValidSubmit="@HandleCreateSubmitted"
                OnQuitEdit="@HandleQuitEditing">
            </ItemEditorPanel>
            break;
            
        case EditState.Editing:
            <ItemEditorPanel
                Title=@($"Update Item {_itemToEditOriginal!.Name}")
                ItemToEdit="@_itemToEdit"
                OnValidSubmit="@HandleEditedSubmitted"
                OnQuitEdit="@HandleQuitEditing">
            </ItemEditorPanel>
            break;
            
        default:
            throw new ArgumentOutOfRangeException();
    }

    <ErrorPanel
        ErrorMessage="@_errorMessage"
        StatusCode="@_statusCode">
    </ErrorPanel>
}


@code {

    public enum EditState
    {
        None, Creating, Editing
    }

    private bool _loading;
    
    // Contains the Items received from the server
    private List<Item> _items = new();
    
    private EditState _editState = EditState.None;
    
    // Copy of Item being Edited or dummy when being Created
    private Item? _itemToEdit;
    
    // The original Item being edited
    private Item? _itemToEditOriginal;

    // Any Error will set this string, causing the ErrorPanel to appear
    private string _errorMessage = string.Empty;
    
    // The HttpStatusCode on Errors
    private HttpStatusCode? _statusCode;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing ...");

        var result = await Client.GetItemsAsync();

        if (result.IsSuccess)
        {
            _items = result.Value;
            Logger.LogInformation("Items initialized with {Count} Items from the Server", _items.Count);
        }
        else
        {
            _errorMessage = result.FailureMessage;
        }
        
        // Ensure we will see the ItemsSummaryPanel, even if empty ...
        _loading = false;
    }

    // Initiate a Creation - called from Create button OnClick event
    private void CreateItem()
    {
        _itemToEdit = new Item(Guid.Empty, DateTimeOffset.UtcNow);
        _itemToEditOriginal = null;
        _editState = EditState.Creating;
        _errorMessage = string.Empty;
        _statusCode = null;
    }

    // Process a Created Item - callback from the ItemEditorPanel
    private async Task HandleCreateSubmitted()
    {
        var result = await Client.PostItemAsync(_itemToEdit!);

        if (result.IsSuccess)
        {
            _items.Add(result.Value);
            
            _itemToEdit = null;
            _editState = EditState.None;
            _errorMessage = string.Empty;
            _statusCode = null;
        }
        else
        {
            // keep the ItemEditorPanel visible with the entered values still intact, show ErrorPanel
            _errorMessage = result.FailureMessage;
            _statusCode = result.StatusCode;
        }
    }

    // Initiate an Edit - called from Edit button OnClick event
    private void EditItem(Item item)
    {
        _itemToEdit = item.Clone();         // Edit on a copy
        _itemToEditOriginal = item;         // Save the original
        _editState = EditState.Editing;     // Show the ItemEditorPanel
    }
    
    // Process an Edited Item - callback from the ItemEditorPanel
    private async Task HandleEditedSubmitted()
    {

        // Use PUT when the Description has changed, otherwise use PATCH
        var result = await (_itemToEdit!.Description != _itemToEditOriginal!.Description
            ? Client.PutItemAsync(_itemToEdit!)
            : Client.PatchItemAsync(_itemToEditOriginal, _itemToEdit));
        
        if (result.IsSuccess)
        {
            // update the original Item in the List with the edited and now persisted values
            Item serverItem = result.Value;
            _itemToEditOriginal.Name = serverItem.Name;
            _itemToEditOriginal.Description = serverItem.Description;
            _itemToEditOriginal.Price = serverItem.Price;
            
            // reset the editing state and the UI
            _itemToEdit = null;
            _itemToEditOriginal = null;
            _errorMessage = string.Empty;
            _statusCode = null;
            _editState = EditState.None;
        }
        else
        {
            // keep the ItemEditorPanel visible with the edited values still intact, show ErrorPanel
            _errorMessage = result.FailureMessage;
            _statusCode = result.StatusCode;
        }
    }
    
    // Quit any Edit, - called as Callback event form the ItemEditor
    private void HandleQuitEditing()
    {
        _editState = EditState.None;
        _itemToEditOriginal = null;
        _itemToEdit = null;
    }

    // Delete the Item from the Server - called from Delete button OnClick event
    private async Task DeleteItem(Item item)
    {
        var result = await Client.DeleteItemAsync(item);

        if (result.IsSuccess)
        {
            _items.Remove(item);
            _errorMessage = string.Empty;
            _statusCode = null;
        }
        else
        {
            _errorMessage = result.FailureMessage;
            _statusCode = result.StatusCode;
        }
            
    }

    // Refresh the Items from the Server - called from the Refresh button OnClick event
    private async Task Refresh()
    {
        var result = await Client.GetItemsAsync();

        if (result.IsSuccess)
        {
            _items = result.Value;
            _errorMessage = string.Empty;
            _statusCode = null;
        }
        else
        {
            // Note: we keep the "old" _items intact
            _errorMessage = result.FailureMessage;
            _statusCode = result.StatusCode;
        }
    }
}
