@page "/"

@using Microsoft.Extensions.Logging

@using BlazorPatchDemo.Shared
@using BlazorPatchDemo.Shared.Entities
@using BlazorPatchDemo.Client.Components
@using BlazorPatchDemo.Shared.Dtos

@inject ILogger<Index> Logger
@inject HttpClient Client

<h2>Catalog Item Editor</h2>

@if (_loading)
{
    <p>Loading Catalog items, please wait ...</p>
}
else
{
    <ItemSummariesPanel
        Items="@_items"
        OnRefresh="@Refresh" 
        OnEditItem="@EditItem" 
        OnDeleteItem="@DeleteItem" 
        OnCreateItem="@CreateItem"
    >
    </ItemSummariesPanel>
    
    @switch (_editState)
    {
        case EditState.None:
            break;
            
        case EditState.Creating:
            <ItemEditorPanel    
                Title="Create a new Item"
                ItemToEdit="@_editItem"
                OnValidSubmit="@HandleCreateSubmitted"
                OnQuitEdit="@HandleQuitEditing">
            </ItemEditorPanel>
            break;
            
        case EditState.Editing:
            <ItemEditorPanel
                Title=@($"Update Item {_editItem!.Id}")
                ItemToEdit="@_editItem"
                OnValidSubmit="@HandleEditedSubmitted"
                OnQuitEdit="@HandleQuitEditing">
            </ItemEditorPanel>
            break;
            
        default:
            throw new ArgumentOutOfRangeException();
    }

    <ErrorPanel 
        ErrorMessage="@_error">
    </ErrorPanel>
}


@code {

    public enum EditState
    {
        None, Creating, Editing
    }

    private bool _loading;
    
    // Contains the editable versions of the Items received from the server
    private List<Item> _items = new();
    
    private EditState _editState = EditState.None;
    
    // Item being Edited or Created
    private Item _editItem = null!;

    // A copy of the Item being edited to roll back to if the Server update fails
    private Item _saveItem = null!;

    // Any Error will set this string, causing the ErrorPanel to appear
    string _error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing ...");

        _items = await HttpGetItemsAsync();
        
        Logger.LogInformation("Items initialized with {Count} Items", _items.Count);

        _loading = false;
    }

    // Initiate a Creation - called from Create button OnClick event
    private void CreateItem()
    {
        _editItem = new Item(Guid.Empty, DateTimeOffset.UtcNow);
        _editState = EditState.Creating;        // Show the form
    }

    private async Task HandleCreateSubmitted()
    {
        ItemToCreateDto itemToCreateDto = _editItem.AsCreateDto();

        Item? item = await HttpPostItemAsync(itemToCreateDto);

        if (item is not null)
            _items.Add(item);

        _editState = EditState.None;
    }

    // Initiate an Edit - called from Edit button OnClick event
    private void EditItem(Item item)
    {
        _editItem = item;                   // Edit the original
        _saveItem = item.Clone();           // Save a copy in case the Server update fails after editing
        _editState = EditState.Editing;     // Show the ItemEditorPanel
    }
    
    // Process an Edited Item - callback from the ItemEditorPanel
    private async Task HandleEditedSubmitted()
    {
        // ToDo: use Patch if the Description was not modified (for smaller payload)
        if (!await HttpPutItemAsync(_editItem!.Id, _editItem.AsUpdateDto()))
        {
            // roll back the edit
            _editItem.Name = _saveItem.Name;
            _editItem.Description = _saveItem.Description;
            _editItem.Price = _saveItem.Price;
        }

        _editState = EditState.None;        
    }
    
    // Quit any Edit, - called as Callback event form the ItemEditor
    private void HandleQuitEditing()
    {
        _editState = EditState.None;
        _editItem = null!;
    }

    // Delete the Item from the Server - called from Delete button OnClick event
    private async Task DeleteItem(Item item)
    {
        if (await HttpDeleteItemAsync(item))
            _items.Remove(item);
    }

    private async Task Refresh()
    {
        List<Item> items = await HttpGetItemsAsync();

        if (string.IsNullOrEmpty(_error))
            _items = items;
    }

    private async Task<List<Item>> HttpGetItemsAsync()
    {
        List<Item> items = new();
        
        try
        {
            List<ItemDto>? dtos = await Client.GetFromJsonAsync<List<ItemDto>>("items");
            
            if (dtos is not null)
            {
                Logger.LogInformation("HttpGetItemsAsync retrieved {Count} Items", dtos.Count);
                
                // Convert every received ItemDto to an Item
                items = dtos.Select(dto => dto.ToItem()).ToList();
                _error = string.Empty;
            }
            else
            {
                Logger.LogError("Error getting Items from the Server");
                _error = $"Error getting Items from the Server";
            }
        }
        catch (HttpRequestException e)
        {
            Logger.LogError("Exception getting Items from Server; Status={StatusCode}, Message=\"{Message}\"",
                e.StatusCode, e.Message);
            _error = $"Exception getting Items from Server; Status={e.StatusCode}, Message=\"{e.Message}\"";
        }

        return items;
    }

    private async Task<Item?> HttpPostItemAsync(ItemToCreateDto itemToCreateDto)
    {
        Item? item = null;
        
        try
        {
            HttpResponseMessage response = await Client.PostAsJsonAsync("/items", itemToCreateDto);
            if (response.IsSuccessStatusCode)
            {
                ItemDto? dto = await response.Content.ReadFromJsonAsync<ItemDto>();

                if (dto is not null)
                {
                    Logger.LogInformation(
                        "Item \"{Name}\" with Id {Id} created on {CreatedDate} at {CreatedTime}",
                        dto.Name, 
                        dto.Id,
                        dto.CreatedDate.ToString("yyyy-MM-dd"),
                        dto.CreatedDate.ToString("hh:mm:ss"));
                    item = dto.ToItem();
                    _error = string.Empty;
                }
                else
                {
                    Logger.LogError("Error deserializing Item \"{Name}\"; Status = {StatusCode},",
                        itemToCreateDto.Name, response.StatusCode);
                    _error = $"Error deserializing Item \"{itemToCreateDto.Name}\"; Status={response.StatusCode}";
                }
            }
            else
            {
                Logger.LogError("Error creating Item \"{Name}\"; Status = {StatusCode},",
                    itemToCreateDto.Name, response.StatusCode);
                _error = $"Error creating Item \"{itemToCreateDto.Name}\"; Status = {response.StatusCode}.";
            }
        }
        catch (HttpRequestException e)
        {
            Logger.LogError("Error creating Item \"{Name}\"; Status = {StatusCode}, Message = \"{Message}\"",
                itemToCreateDto.Name, e.StatusCode, e.Message);
            _error = $"Exception creating {itemToCreateDto.Name}; Status={e.StatusCode}, Message=\"{e.Message}\".";
        }

        return item;
    }
    
    // Use PUT to update an Item at the Server
    private async Task<bool> HttpPutItemAsync(Guid id, ItemToUpdateDto dto)
    {
        bool success = false;
        
        try
        {
            HttpResponseMessage response = await Client.PutAsJsonAsync($"items/{id}", dto);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Item \"{Name}\" has been updated at {Path}",
                    dto.Name, $"items/{id}");
                success = true;
                _error = string.Empty;
            }
            else
            {
                Logger.LogError("Error Putting Item \"{Name}\" at {Path}, Status = {StatusCode},",
                    dto.Name, $"items/{id}", response.StatusCode);
                _error = $"Error Putting Item \"{dto.Name}\" at items/{id}, Status = {response.StatusCode}";
            }
        }
        catch (HttpRequestException e)
        {
            Logger.LogError("Error Putting Item \"{Name}\" at {Path}, Message = {Message},",
                dto.Name, $"items/{id}", e.Message);
            _error = ($"Exception Put {dto.Name} at at items/{id}, Message=\"{e.Message}\".");
        }

        return success;
    }

    private async Task<bool> HttpDeleteItemAsync(Item item)
    {
        bool success = false;
        
        try
        {
            var response = await Client.DeleteAsync($"items/{item.Id}");

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Item \"{Name}\" with Id {Id} has been deleted",
                    item.Name, item.Id);

                success = true;
                _error = string.Empty;
            }
            else
            {
                Logger.LogError("Error deleting Item \"{Name}\" with Id {Id}; Status = {StatusCode}",
                    item.Name, item.Id, response.StatusCode);
                _error = $"Error deleting Item \"{item.Name}\" ({item.Id}); Status = {response.StatusCode}.";
            }

        }
        catch (HttpRequestException e)
        {
            Logger.LogError("Exception deleting Item \"{Name}\" with Id {Id}; Status = {StatusCode}, Message = {Message}",
                item.Name, item.Id, e.StatusCode, e.Message);
            _error = $"Exception deleting {item.Name} ({item.Id}); Message=\"{e.Message}\".";
        }

        return success;
    }

}
